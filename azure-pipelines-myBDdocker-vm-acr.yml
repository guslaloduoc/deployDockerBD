trigger:
  branches:
    include:
      - main

variables:
  VM_IP_PUBLICA: "20.57.75.7"
  
  # --- Variables Originales Corregidas (en minúsculas) ---
  IMAGE_NAME: "rgcontainernew"
  ACR_NAME: "rgcontainernew"
  ACR_USERNAME: "rgcontainernew"
  
  # Tu contraseña original del ACR
  ACR_PASSWORD: "BTEHzRU4soLpTCxLBeJJJQIE1clcu822NrrotUVacm+ACRCnIU5Q"

stages:
- stage: Deploy
  jobs:
  - deployment: DeployToVM
    displayName: "Deploy MySQL to VM"
    environment:
      name: "VMDL" # Asegúrate de que este es el nombre correcto de tu entorno
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - script: |
              # Verificar e instalar Docker en la máquina virtual
              if ! command -v docker &> /dev/null; then
                echo "Docker no está instalado. Instalando Docker..."
                export DEBIAN_FRONTEND=noninteractive
                sudo apt-get update && \
                sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release && \
                curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg && \
                echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && \
                sudo apt-get update && \
                sudo apt-get install -y docker-ce docker-ce-cli containerd.io && \
                sudo systemctl start docker && \
                sudo systemctl enable docker && \
                sudo docker --version
              else
                echo "Docker ya está instalado."
              fi
            displayName: "Verificar e Instalar Docker"
            failOnStderr: true

          - script: |
              # Autenticarse en Azure Container Registry
              echo "Autenticándose en $(ACR_NAME).azurecr.io..."
              echo "$(ACR_PASSWORD)" | sudo docker login $(ACR_NAME).azurecr.io -u $(ACR_USERNAME) --password-stdin

              # Descargar la imagen desde ACR con la RUTA CORRECTA
              echo "Descargando imagen: $(ACR_NAME).azurecr.io/$(IMAGE_NAME):latest"
              sudo docker pull $(ACR_NAME).azurecr.io/$(IMAGE_NAME):latest

              # Detener y eliminar el contenedor antiguo si existe
              if sudo docker ps -a --format '{{.Names}}' | grep -Eq "^mysql_container\$"; then
                echo "El contenedor 'mysql_container' ya existe. Deteniendo y eliminando..."
                sudo docker stop mysql_container
                sudo docker rm mysql_container
              fi

              # Ejecutar el nuevo contenedor con la RUTA CORRECTA
              echo "Creando y ejecutando el nuevo contenedor 'mysql_container'..."
              sudo docker run -d -p 3306:3306 --name mysql_container \
                -e MYSQL_ROOT_PASSWORD=Password123 \
                -e MYSQL_DATABASE=my_database \
                -e MYSQL_USER=mysqluser \
                -e MYSQL_PASSWORD=Password123 \
                $(ACR_NAME).azurecr.io/$(IMAGE_NAME):latest

              echo "Verificando contenedores en ejecución..."
              sudo docker ps
            displayName: "Descargar y ejecutar la imagen MySQL desde ACR"
            failOnStderr: true

          - script: |
              # Mostrar la URL para conectarse a MySQL
              echo "Conectar a MySQL en la máquina virtual con la IP: $(VM_IP_PUBLICA), puerto: 3306"
            displayName: "Mostrar detalles de conexión a MySQL"


